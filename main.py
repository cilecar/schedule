import logging
import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta

TOKEN = "7580702048:AAFWmm573ZcKt6zcQXquW0cjsf9bUxKcpFw"
HOMEWORK_FILE = "homework.json"

bot = Bot(token=TOKEN)
dp = Dispatcher()

class HomeworkState(StatesGroup):
    adding = State()
    changing = State()
    choosing_subject = State()
    changing_subject = State()
    attaching_file = State()
    entering_task = State()
    entering_due_date = State()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")],
        [KeyboardButton(text="–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è")]
    ],
    resize_keyboard=True
)

schedule = { 
    "1": 
        { 
        "–ß–µ—Ç–≤–µ—Ä–≥": [ 
            "13:10 - –ø—Ä.–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ü–µ—Ç—Ä–æ—Å—è–Ω –ê.–ú. https://eios.imsit.ru/course/view.php?id=12016", 
            "14:50 - –ª.–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ì—Ä–∏—Ü—ã–∫ –ï.–ê. https://eios.imsit.ru/course/view.php?id=12014", 
            "16:30 - –ø—Ä.–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ì—Ä–∏—Ü—ã–∫ –ï.–ê. https://eios.imsit.ru/course/view.php?id=12014", 
            "18:10 - –ª.–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –õ–µ–æ–Ω–æ–≤–∞ –ò.–í. https://eios.imsit.ru/course/view.php?id=12015" ], 
        "–ü—è—Ç–Ω–∏—Ü–∞": [ 
            "9:40 - –ª.–ò—Å—Ç–æ—Ä–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–æ–±–æ—Ä—Å—Ç–≤–∞ –ú–∏–∫–∞—ç–ª—è–Ω –ê.–°. https://eios.imsit.ru/course/view.php?id=11962", 
            "11:30 - –ø—Ä.–ü—Ä–∞–≤–æ –õ—É–¥–∏–ª–∏–Ω –î.–ë. https://eios.imsit.ru/course/view.php?id=11984" ], 
        "–°—É–±–±–æ—Ç–∞": [ 
            "8:00 - –ø—Ä.–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ù–∏–≥–º–∞—Ç–æ–≤ –í.–ê.", 
            "9:40 - –ø—Ä.–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ß—É–º–∏—á–µ–≤–∞ –ù.–í.", 
            "11:10 - –ø—Ä.–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏ —ç—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ –û–ª—å—à–∞–Ω—Å–∫–∞—è –°.–ê." ] 
            }, 
    "2": 
        { 
        "–ß–µ—Ç–≤–µ—Ä–≥": [ 
            "13:10 - –ª.–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏ –û–±—É—Ö–æ–≤–∞ –Æ.–ê. https://eios.imsit.ru/course/view.php?id=12026", 
            "14:50 - –ø—Ä.–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏ –û–±—É—Ö–æ–≤–∞ –Æ.–ê. https://eios.imsit.ru/course/view.php?id=12026", 
            "16:30 - –ø—Ä.–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –ì—Ä–∏—Ü—ã–∫ –ï.–ê. https://eios.imsit.ru/course/view.php?id=12014", 
            "18:10 - –ø—Ä.–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –õ–µ–æ–Ω–æ–≤–∞ –ò.–í. https://eios.imsit.ru/course/view.php?id=12015" ], 
        "–ü—è—Ç–Ω–∏—Ü–∞": [ 
            "8:00 - –ª.–§–∏–∑–∏–∫–∞ –õ–µ–æ–Ω–æ–≤–∞ –ò.–í. https://eios.imsit.ru/course/view.php?id=12011", 
            "9:40 - –ª.–ü—Ä–∞–≤–æ –ñ–∏–¥—è–µ–≤–∞ –ï.–°. https://eios.imsit.ru/course/view.php?id=11984" ], 
        "–°—É–±–±–æ—Ç–∞": [ 
            "8:00 - –ø—Ä.–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –õ–µ–æ–Ω–æ–≤–∞ –ò.–í.", 
            "9:40 - –ª–∞–±.–§–∏–∑–∏–∫–∞ –õ–µ–æ–Ω–æ–≤–∞ –ò.–í.", 
            "11:30 - –ø—Ä.–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –õ–∏—Å–∏–Ω –î.–ê." ] 
        } }

schedule_subjects = ["–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã –∏ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", "–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", "–ò—Å—Ç–æ—Ä–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–æ–±–æ—Ä—Å—Ç–≤–∞", "–ü—Ä–∞–≤–æ", "–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏ —ç—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ", "–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏", "–§–∏–∑–∏–∫–∞", "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]
homework = []

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def load_homework(user_id):
    if os.path.exists(HOMEWORK_FILE):
        with open(HOMEWORK_FILE, "r", encoding="utf-8") as f:
            all_homework = json.load(f)
            return all_homework.get(str(user_id), [])
    return []

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_homework(user_id, homework_data):
    if os.path.exists(HOMEWORK_FILE):
        with open(HOMEWORK_FILE, "r", encoding="utf-8") as f:
            all_homework = json.load(f)
    else:
        all_homework = {}

    all_homework[str(user_id)] = homework_data

    with open(HOMEWORK_FILE, "w", encoding="utf-8") as f:
        json.dump(all_homework, f, ensure_ascii=False, indent=4)



@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.", reply_markup=main_keyboard)



# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è 
@dp.message(F.text == "–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def full_schedule(message: types.Message):
    response = "–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
    for week, days in schedule.items():
        response += f"\n–ù–µ–¥–µ–ª—è {week}:\n"
        for day, lessons in days.items():
            response += f"{day}:\n" + "\n".join(lessons) + "\n"
    await message.answer(response)




# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
@dp.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def today_schedule(message: types.Message):
    today = datetime.now()

    SEMESTER_START = datetime(2024, 9, 2)

    weeks_passed = (today - SEMESTER_START).days // 7

    current_week = "1" if weeks_passed % 2 == 0 else "2"

    days_map = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞", 
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    today_name = days_map.get(today.strftime("%A"), today.strftime("%A"))

    response = schedule.get(current_week, {}).get(today_name, ["–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç."])
    await message.answer(f"–°–µ–π—á–∞—Å {current_week}-—è –Ω–µ–¥–µ–ª—è.\n\n" + "\n".join(response))



# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
@dp.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
async def tomorrow_schedule(message: types.Message):
    now = datetime.now()

    SEMESTER_START = datetime(2024, 9, 2)  # 2 —Å–µ–Ω—Ç—è–±—Ä—è 2024

    weeks_passed = (now - SEMESTER_START).days // 7

    current_week = "1" if weeks_passed % 2 == 0 else "2"

    tomorrow = (now.weekday() + 1) % 7
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    tomorrow_name = days[tomorrow]

    response = schedule.get(current_week, {}).get(tomorrow_name, ["–ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç."])

    await message.answer("\n".join(response))



# –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –ø–∞—Ä–∞—Ö
async def send_tomorrow_schedule():
    while True:
        now = datetime.now()
        target_time = now.replace(hour=18, minute=0, second=0, microsecond=0)

        if now > target_time:
            target_time += timedelta(days=1)

        wait_time = (target_time - now).total_seconds()
        await asyncio.sleep(wait_time)

        SEMESTER_START = datetime(2024, 9, 2)

        weeks_passed = (now - SEMESTER_START).days // 7

        current_week = "1" if weeks_passed % 2 == 0 else "2"

        tomorrow_day = (datetime.today() + timedelta(days=1)).strftime("%A")
        days_map = {
            "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞", 
            "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }

        tomorrow_name = days_map.get(tomorrow_day, tomorrow_day)
        
        response = schedule.get(current_week, {}).get(tomorrow_name, ["–ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç."])

        await bot.send_message(706172589, f"üìÖ –ó–∞–≤—Ç—Ä–∞ —É —Ç–µ–±—è:\n" + "\n".join(response))


#----------------------------------------------------------------------------------------------------------#



# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def add_homework_start(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=subj)] for subj in schedule_subjects] + [[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]], 
        resize_keyboard=True
    )
    await state.set_state(HomeworkState.choosing_subject)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=keyboard)


@dp.message(HomeworkState.choosing_subject)
async def choose_subject(message: types.Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        return

    if message.text not in schedule_subjects:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(subject=message.text)
    
    await state.set_state(HomeworkState.entering_task)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(HomeworkState.entering_task)
async def enter_task(message: types.Message, state: FSMContext):
    await state.update_data(task=message.text)
    await state.set_state(HomeworkState.attaching_file)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª")], [KeyboardButton(text="‚û° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")], [KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª?", reply_markup=keyboard)

@dp.message(HomeworkState.attaching_file, F.text == "üö´ –û—Ç–º–µ–Ω–∞")
async def cancel_attaching_file(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)

@dp.message(HomeworkState.attaching_file, F.text == "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª")
async def ask_for_file(message: types.Message, state: FSMContext):
    
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF, DOCX –∏ –¥—Ä—É–≥–∏–µ).", reply_markup=types.ReplyKeyboardRemove())

@dp.message(HomeworkState.attaching_file, F.content_type.in_({"document"}))
async def receive_file(message: types.Message, state: FSMContext):
    file_id = message.document.file_id
    await state.update_data(file_id=file_id, file_name=message.document.file_name)
    await state.set_state(HomeworkState.entering_due_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.03.2025):")

@dp.message(HomeworkState.attaching_file, F.text == "‚û° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_file(message: types.Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        return
    await state.update_data(file_id=None, file_name=None)
    await state.set_state(HomeworkState.entering_due_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=types.ReplyKeyboardRemove())

@dp.message(HomeworkState.entering_due_date)
async def enter_due_date(message: types.Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        return

    try:
        datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return
    
    data = await state.get_data()
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    homework = load_homework(user_id)

    homework.append({
        "subject": data["subject"],
        "task": data["task"],
        "due_date": message.text,
        "date_added": datetime.now().strftime("%d.%m.%Y"),
        "status": "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚ùå",
        "file_id": data.get("file_id"),
        "file_name": data.get("file_name")
    })

    save_homework(user_id, homework)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–º–∞—à–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.clear()
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_keyboard)




# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
@dp.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
async def show_homework(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    homework = load_homework(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∞—à–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not homework:
        await message.answer("–î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
    else:
        for task in homework:
            response = f"[{task['status']}] {task['subject']} - {task['task']}, —Å–¥–µ–ª–∞—Ç—å –¥–æ {task['due_date']} (–î–æ–±–∞–≤–ª–µ–Ω–æ: {task['date_added']})"
            if task.get("file_id"):
                response += f"\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {task['file_name']}"
                await message.answer_document(task["file_id"], caption=response)
            else:
                await message.answer(response)



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
])

# –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@dp.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è")
async def change_homework_prompt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    homework = load_homework(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∞—à–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not homework:
        await message.answer("–î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
        return
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=subj)] for subj in schedule_subjects] + [[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]], 
        resize_keyboard=True
    )

    await state.set_state(HomeworkState.changing_subject)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=keyboard)

@dp.message(HomeworkState.changing_subject)
async def choose_subject_for_status_change(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    homework = load_homework(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∞—à–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        return

    if message.text not in schedule_subjects:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    subject = message.text
    subject_tasks = [task for task in homework if task["subject"] == subject]

    if not subject_tasks:
        await state.clear()
        await message.answer(f"–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}.", reply_markup=main_keyboard)
        return

    await state.update_data(subject=subject, subject_tasks=subject_tasks)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è
    task_buttons = [[KeyboardButton(text=task["task"])] for task in subject_tasks]
    task_buttons.append([KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")])

    keyboard = ReplyKeyboardMarkup(keyboard=task_buttons, resize_keyboard=True)

    await state.set_state(HomeworkState.changing)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=keyboard)

@dp.message(HomeworkState.changing)
async def change_homework_status(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    subject_tasks = data.get("subject_tasks", [])

    selected_task = next((task for task in subject_tasks if task["task"] == message.text), None)

    if not selected_task:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_task=selected_task)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="status_done")],
        [InlineKeyboardButton(text="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="status_not_done")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="status_delete")],
        [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:\n<b>{selected_task['task']}</b>", reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data in ["status_done", "status_not_done", "status_delete", "cancel"])
async def process_status_change(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    selected_task = data.get("selected_task")  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É

    if callback_query.data == "cancel":
        await state.clear()
        await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard)
        await callback_query.answer()
        return
    
    if not selected_task:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_keyboard)
        await callback_query.answer()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    if callback_query.data == "status_done":
        selected_task["status"] = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ"
    elif callback_query.data == "status_not_done":
        selected_task["status"] = "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚ùå"
    elif callback_query.data == "status_delete":
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
        homework = load_homework(user_id)
        homework = [task for task in homework if task != selected_task]  # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
        save_homework(user_id, homework)
        await callback_query.message.answer('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.', reply_markup=main_keyboard)
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    homework = load_homework(user_id)

    # –ò—â–µ–º –Ω—É–∂–Ω—É—é –∑–∞–¥–∞—á—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ —Å—Ç–∞—Ç—É—Å
    for task in homework:
        if task["task"] == selected_task["task"]:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∏–º–µ–Ω–∏ –∑–∞–¥–∞–Ω–∏—è
            task["status"] = selected_task["status"]  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    save_homework(user_id, homework)

    await state.clear()
    await callback_query.message.answer(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: {selected_task["status"]}', reply_markup=main_keyboard)
    await callback_query.answer()









async def send_deadline_reminders():
    while True:
        now = datetime.now()
        for task in homework:
            due_date = datetime.strptime(task["due_date"], "%d.%m.%Y")
            if due_date - timedelta(days=1) <= now < due_date and task["status"] == "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚ùå":
                await bot.send_message(
                    chat_id="706172589",
                    text=f"‚ùó–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {task['subject']}!‚ùó\n–ó–∞–¥–∞–Ω–∏–µ: {task['task']}"
                )
        await asyncio.sleep(3600)


USER_HOMEWORK_DIR = "homework_data/"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def load_homework(user_id):
    user_homework_file = f"{USER_HOMEWORK_DIR}{user_id}_homework.json"
    if os.path.exists(user_homework_file):
        with open(user_homework_file, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_homework(user_id, homework_data):
    user_homework_file = f"{USER_HOMEWORK_DIR}{user_id}_homework.json"
    os.makedirs(USER_HOMEWORK_DIR, exist_ok=True)
    with open(user_homework_file, "w", encoding="utf-8") as f:
        json.dump(homework_data, f, ensure_ascii=False, indent=4)


async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(send_deadline_reminders())
    await bot.delete_webhook(drop_pending_updates=True)
    loop = asyncio.get_event_loop()
    loop.create_task(send_tomorrow_schedule())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())